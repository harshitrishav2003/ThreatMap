{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/threat-map/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst attackData = [{\n  id: 1,\n  source: [37.7749, -122.4194],\n  destination: [40.7128, -74.0060],\n  sourceName: 'USA',\n  destinationName: 'USA',\n  threatType: 'malware'\n}];\nconst MapComponent = () => {\n  _s();\n  useEffect(() => {\n    const map = L.map('map', {\n      zoomControl: false,\n      scrollWheelZoom: false,\n      doubleClickZoom: false,\n      dragging: false,\n      maxBounds: [[-90, -180], [90, 180]],\n      maxBoundsViscosity: 1.0\n    }).setView([40, 0], 1.5);\n    L.rectangle([[-90, -180], [90, 180]], {\n      color: '#000000',\n      fillColor: '#000000',\n      fillOpacity: 1\n    }).addTo(map);\n    fetch('https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson').then(response => response.json()).then(data => {\n      L.geoJSON(data, {\n        style: {\n          color: '#4A90E2',\n          weight: 0.5,\n          fillColor: '#000000',\n          fillOpacity: 0.5\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on({\n            mouseover: () => layer.setStyle({\n              color: '#4A90E2',\n              weight: 1.5\n            }),\n            mouseout: () => layer.setStyle({\n              color: '#4A90E2',\n              weight: 0.5\n            })\n          });\n        }\n      }).addTo(map);\n    });\n    const svgLayer = d3.select(map.getPanes().overlayPane).append('svg'),\n      g = svgLayer.append('g').attr('class', 'leaflet-zoom-hide');\n    let currentIndex = 0;\n    const showNextAttack = () => {\n      if (currentIndex >= attackData.length) currentIndex = 0;\n      const attack = attackData[currentIndex];\n      currentIndex++;\n      const source = projectPoint(map, attack.source);\n      const destination = projectPoint(map, attack.destination);\n      const midPoint = [(source[0] + destination[0]) / 2 + 100, (source[1] + destination[1]) / 2];\n      let lineColor;\n      switch (attack.threatType) {\n        case 'malware':\n          lineColor = 'red';\n          break;\n        case 'phishing':\n          lineColor = 'purple';\n          break;\n        default:\n          lineColor = 'white';\n      }\n      const lineGenerator = d3.line().curve(d3.curveBundle.beta(1)).x(d => d[0]).y(d => d[1]);\n      g.append('path').datum([source, midPoint, destination]).attr('class', 'attack-line').attr('d', lineGenerator).attr('stroke', lineColor).attr('stroke-width', 2).transition().duration(1000).ease(d3.easeLinear).attr('stroke-dashoffset', 0).on('end', () => showNextAttack());\n      const attackInfo = `${attack.sourceName} ➔ ${attack.destinationName} (${attack.threatType})`;\n      d3.select('#activeAttacksList').append('li').text(attackInfo).transition().duration(1000).remove();\n    };\n    showNextAttack();\n  }, []);\n  const projectPoint = (map, latlng) => {\n    const point = map.latLngToLayerPoint(new L.LatLng(latlng[0], latlng[1]));\n    return [point.x, point.y];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n_s(MapComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","d3","L","jsxDEV","_jsxDEV","attackData","id","source","destination","sourceName","destinationName","threatType","MapComponent","_s","map","zoomControl","scrollWheelZoom","doubleClickZoom","dragging","maxBounds","maxBoundsViscosity","setView","rectangle","color","fillColor","fillOpacity","addTo","fetch","then","response","json","data","geoJSON","style","weight","onEachFeature","feature","layer","on","mouseover","setStyle","mouseout","svgLayer","select","getPanes","overlayPane","append","g","attr","currentIndex","showNextAttack","length","attack","projectPoint","midPoint","lineColor","lineGenerator","line","curve","curveBundle","beta","x","d","y","datum","transition","duration","ease","easeLinear","attackInfo","text","remove","latlng","point","latLngToLayerPoint","LatLng","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/threat-map/src/components/MapComponent.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst attackData = [\n  { id: 1, source: [37.7749, -122.4194], destination: [40.7128, -74.0060], sourceName: 'USA', destinationName: 'USA', threatType: 'malware' },\n \n];\n\nconst MapComponent = () => {\n  useEffect(() => {\n    const map = L.map('map', {\n      zoomControl: false,\n      scrollWheelZoom: false,\n      doubleClickZoom: false,\n      dragging: false,\n      maxBounds: [[-90, -180], [90, 180]],\n      maxBoundsViscosity: 1.0,\n    }).setView([40, 0], 1.5);\n\n    L.rectangle([[-90, -180], [90, 180]], {\n      color: '#000000',\n      fillColor: '#000000',\n      fillOpacity: 1,\n    }).addTo(map);\n\n    fetch('https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson')\n      .then((response) => response.json())\n      .then((data) => {\n        L.geoJSON(data, {\n          style: {\n            color: '#4A90E2',\n            weight: 0.5,\n            fillColor: '#000000',\n            fillOpacity: 0.5,\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on({\n              mouseover: () => layer.setStyle({ color: '#4A90E2', weight: 1.5 }),\n              mouseout: () => layer.setStyle({ color: '#4A90E2', weight: 0.5 }),\n            });\n          },\n        }).addTo(map);\n      });\n\n    const svgLayer = d3.select(map.getPanes().overlayPane).append('svg'),\n      g = svgLayer.append('g').attr('class', 'leaflet-zoom-hide');\n\n    let currentIndex = 0;\n\n    const showNextAttack = () => {\n      if (currentIndex >= attackData.length) currentIndex = 0;\n\n      const attack = attackData[currentIndex];\n      currentIndex++;\n\n      const source = projectPoint(map, attack.source);\n      const destination = projectPoint(map, attack.destination);\n      const midPoint = [\n        (source[0] + destination[0]) / 2 + 100,\n        (source[1] + destination[1]) / 2,\n      ];\n\n      let lineColor;\n      switch (attack.threatType) {\n        case 'malware':\n          lineColor = 'red';\n          break;\n        case 'phishing':\n          lineColor = 'purple';\n          break;\n        default:\n          lineColor = 'white';\n      }\n\n      const lineGenerator = d3.line().curve(d3.curveBundle.beta(1)).x((d) => d[0]).y((d) => d[1]);\n\n      g.append('path')\n        .datum([source, midPoint, destination])\n        .attr('class', 'attack-line')\n        .attr('d', lineGenerator)\n        .attr('stroke', lineColor)\n        .attr('stroke-width', 2)\n        .transition()\n        .duration(1000)\n        .ease(d3.easeLinear)\n        .attr('stroke-dashoffset', 0)\n        .on('end', () => showNextAttack());\n\n      const attackInfo = `${attack.sourceName} ➔ ${attack.destinationName} (${attack.threatType})`;\n      d3.select('#activeAttacksList').append('li').text(attackInfo).transition().duration(1000).remove();\n    };\n\n    showNextAttack();\n  }, []);\n\n  const projectPoint = (map, latlng) => {\n    const point = map.latLngToLayerPoint(new L.LatLng(latlng[0], latlng[1]));\n    return [point.x, point.y];\n  };\n\n  return <div id=\"map\"></div>;\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}