{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/threat-map/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  useEffect(() => {\n    // Initialize the map\n    const map = L.map('map', {\n      zoomControl: false,\n      scrollWheelZoom: false,\n      doubleClickZoom: false,\n      dragging: false,\n      maxBounds: [[-90, -180], [90, 180]],\n      maxBoundsViscosity: 1.0\n    }).setView([40, 0], 1.5);\n\n    // Create a pane for the background layer\n    map.createPane('backgroundPane');\n    map.getPane('backgroundPane').style.zIndex = 100;\n\n    // Add a solid-colored rectangle to cover the entire map\n    L.rectangle([[-90, -180], [90, 180]], {\n      color: '#000000',\n      fillColor: '#000000',\n      fillOpacity: 1,\n      pane: 'backgroundPane'\n    }).addTo(map);\n\n    // Fetch and add geoJSON data to the map\n    fetch('https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson').then(response => response.json()).then(data => {\n      L.geoJSON(data, {\n        style: {\n          color: '#4A90E2',\n          weight: 0.5,\n          fillColor: '#000000',\n          fillOpacity: 0.5\n        },\n        onEachFeature: function (feature, layer) {\n          layer.on({\n            mouseover: function () {\n              layer.setStyle({\n                color: '#4A90E2',\n                weight: 1.5,\n                dashArray: '5, 5',\n                fillColor: '#4A90E2',\n                fillOpacity: 0.5\n              });\n            },\n            mouseout: function () {\n              layer.setStyle({\n                color: '#4A90E2',\n                weight: 0.5,\n                dashArray: '',\n                fillColor: '#000000',\n                fillOpacity: 0.5\n              });\n            }\n          });\n        }\n      }).addTo(map);\n    });\n\n    // Create an SVG layer on top of Leaflet\n    const svgLayer = d3.select(map.getPanes().overlayPane).append(\"svg\");\n    const g = svgLayer.append(\"g\").attr(\"class\", \"leaflet-zoom-hide\");\n\n    // Define the attack data\n    const attackData = [{\n      id: 1,\n      source: [37.7749, -122.4194],\n      destination: [40.7128, -74.0060],\n      threatType: 'malware'\n    }, {\n      id: 2,\n      source: [51.5074, -0.1278],\n      destination: [48.8566, 2.3522],\n      threatType: 'phishing'\n    }, {\n      id: 3,\n      source: [35.6895, 139.6917],\n      destination: [37.5665, 126.9780],\n      threatType: 'exploit'\n    }\n    // ... (remaining attack data)\n    ];\n    let currentIndex = 0;\n\n    // Define the projection from geographical coordinates (lat, lon) to screen points\n    function projectPoint(latlng) {\n      const point = map.latLngToLayerPoint(new L.LatLng(latlng[0], latlng[1]));\n      return [point.x, point.y];\n    }\n\n    // Function to redraw the attack lines and reposition the SVG\n    function reset() {\n      const bounds = map.getBounds(),\n        topLeft = map.latLngToLayerPoint(bounds.getNorthWest()),\n        bottomRight = map.latLngToLayerPoint(bounds.getSouthEast());\n      svgLayer.attr('width', bottomRight.x - topLeft.x).attr('height', bottomRight.y - topLeft.y).style('left', `${topLeft.x}px`).style('top', `${topLeft.y}px`);\n      g.attr('transform', `translate(${-topLeft.x}, ${-topLeft.y})`);\n\n      // Start the attack animations\n      showNextAttack();\n    }\n\n    // Function to display the next attack after the previous one reaches the destination\n    function showNextAttack() {\n      if (currentIndex >= attackData.length) {\n        currentIndex = 0; // Reset if we reach the end of the attack data\n      }\n      const attack = attackData[currentIndex];\n      currentIndex++; // Move to the next attack in the list\n\n      const source = projectPoint(attack.source);\n      const destination = projectPoint(attack.destination);\n\n      // Mid-point for curvature\n      const midPoint = [(source[0] + destination[0]) / 2 + 100, (source[1] + destination[1]) / 2];\n\n      // Set color based on threat type\n      let lineColor;\n      switch (attack.threatType) {\n        case 'malware':\n          lineColor = 'red';\n          break;\n        case 'phishing':\n          lineColor = 'purple';\n          break;\n        case 'exploit':\n          lineColor = 'yellow';\n          break;\n        default:\n          lineColor = 'white';\n      }\n\n      // Create line generator for curved path\n      const lineGenerator = d3.line().curve(d3.curveBundle.beta(1)).x(d => d[0]).y(d => d[1]);\n\n      // Add attack line to SVG\n      const path = g.append(\"path\").datum([source, midPoint, destination]).attr(\"class\", \"attack-line\").attr(\"d\", lineGenerator).style(\"fill\", \"none\").style(\"stroke\", lineColor).style(\"stroke-width\", 2).style(\"opacity\", 0.8);\n\n      // Animate the attack line\n      path.transition().duration(2000).attrTween(\"stroke-dasharray\", function () {\n        const length = this.getTotalLength();\n        return d3.interpolateString(\"0,\" + length, length + \",\" + length);\n      }).on(\"end\", () => {\n        // Remove the path after animation\n        path.remove();\n        // Delay before showing the next attack\n        setTimeout(() => {\n          reset(); // Call reset to show the next attack\n        }, 500); // Adjust the timeout as needed\n      });\n    }\n\n    // Update the map on resize\n    map.on('resize', reset);\n\n    // Initial reset to draw the first attack\n    reset();\n\n    // Cleanup on component unmount\n    return () => {\n      map.off('resize', reset);\n      map.remove(); // Clean up the map instance\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: '80vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 10\n  }, this); // Added style for full height\n};\n_s(MapComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","d3","L","jsxDEV","_jsxDEV","MapComponent","_s","map","zoomControl","scrollWheelZoom","doubleClickZoom","dragging","maxBounds","maxBoundsViscosity","setView","createPane","getPane","style","zIndex","rectangle","color","fillColor","fillOpacity","pane","addTo","fetch","then","response","json","data","geoJSON","weight","onEachFeature","feature","layer","on","mouseover","setStyle","dashArray","mouseout","svgLayer","select","getPanes","overlayPane","append","g","attr","attackData","id","source","destination","threatType","currentIndex","projectPoint","latlng","point","latLngToLayerPoint","LatLng","x","y","reset","bounds","getBounds","topLeft","getNorthWest","bottomRight","getSouthEast","showNextAttack","length","attack","midPoint","lineColor","lineGenerator","line","curve","curveBundle","beta","d","path","datum","transition","duration","attrTween","getTotalLength","interpolateString","remove","setTimeout","off","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/threat-map/src/components/MapComponent.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst MapComponent = () => {\n  useEffect(() => {\n    // Initialize the map\n    const map = L.map('map', {\n      zoomControl: false,\n      scrollWheelZoom: false,\n      doubleClickZoom: false,\n      dragging: false,\n      maxBounds: [[-90, -180], [90, 180]],\n      maxBoundsViscosity: 1.0\n    }).setView([40, 0], 1.5);\n\n    // Create a pane for the background layer\n    map.createPane('backgroundPane');\n    map.getPane('backgroundPane').style.zIndex = 100;\n\n    // Add a solid-colored rectangle to cover the entire map\n    L.rectangle([[-90, -180], [90, 180]], {\n      color: '#000000',\n      fillColor: '#000000',\n      fillOpacity: 1,\n      pane: 'backgroundPane'\n    }).addTo(map);\n\n    // Fetch and add geoJSON data to the map\n    fetch('https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson')\n      .then(response => response.json())\n      .then(data => {\n        L.geoJSON(data, {\n          style: {\n            color: '#4A90E2',\n            weight: 0.5,\n            fillColor: '#000000',\n            fillOpacity: 0.5\n          },\n          onEachFeature: function (feature, layer) {\n            layer.on({\n              mouseover: function () {\n                layer.setStyle({\n                  color: '#4A90E2',\n                  weight: 1.5,\n                  dashArray: '5, 5',\n                  fillColor: '#4A90E2',\n                  fillOpacity: 0.5\n                });\n              },\n              mouseout: function () {\n                layer.setStyle({\n                  color: '#4A90E2',\n                  weight: 0.5,\n                  dashArray: '',\n                  fillColor: '#000000',\n                  fillOpacity: 0.5\n                });\n              }\n            });\n          }\n        }).addTo(map);\n      });\n\n    // Create an SVG layer on top of Leaflet\n    const svgLayer = d3.select(map.getPanes().overlayPane).append(\"svg\");\n    const g = svgLayer.append(\"g\").attr(\"class\", \"leaflet-zoom-hide\");\n\n    // Define the attack data\n    const attackData = [\n      { id: 1, source: [37.7749, -122.4194], destination: [40.7128, -74.0060], threatType: 'malware' },\n      { id: 2, source: [51.5074, -0.1278], destination: [48.8566, 2.3522], threatType: 'phishing' },\n      { id: 3, source: [35.6895, 139.6917], destination: [37.5665, 126.9780], threatType: 'exploit' },\n      // ... (remaining attack data)\n    ];\n\n    let currentIndex = 0;\n\n    // Define the projection from geographical coordinates (lat, lon) to screen points\n    function projectPoint(latlng) {\n      const point = map.latLngToLayerPoint(new L.LatLng(latlng[0], latlng[1]));\n      return [point.x, point.y];\n    }\n\n    // Function to redraw the attack lines and reposition the SVG\n    function reset() {\n      const bounds = map.getBounds(),\n        topLeft = map.latLngToLayerPoint(bounds.getNorthWest()),\n        bottomRight = map.latLngToLayerPoint(bounds.getSouthEast());\n\n      svgLayer\n        .attr('width', bottomRight.x - topLeft.x)\n        .attr('height', bottomRight.y - topLeft.y)\n        .style('left', `${topLeft.x}px`)\n        .style('top', `${topLeft.y}px`);\n\n      g.attr('transform', `translate(${-topLeft.x}, ${-topLeft.y})`);\n\n      // Start the attack animations\n      showNextAttack();\n    }\n\n    // Function to display the next attack after the previous one reaches the destination\n    function showNextAttack() {\n      if (currentIndex >= attackData.length) {\n        currentIndex = 0; // Reset if we reach the end of the attack data\n      }\n\n      const attack = attackData[currentIndex];\n      currentIndex++; // Move to the next attack in the list\n\n      const source = projectPoint(attack.source);\n      const destination = projectPoint(attack.destination);\n\n      // Mid-point for curvature\n      const midPoint = [\n        (source[0] + destination[0]) / 2 + 100,\n        (source[1] + destination[1]) / 2\n      ];\n\n      // Set color based on threat type\n      let lineColor;\n      switch (attack.threatType) {\n        case 'malware':\n          lineColor = 'red';\n          break;\n        case 'phishing':\n          lineColor = 'purple';\n          break;\n        case 'exploit':\n          lineColor = 'yellow';\n          break;\n        default:\n          lineColor = 'white';\n      }\n\n      // Create line generator for curved path\n      const lineGenerator = d3.line()\n        .curve(d3.curveBundle.beta(1))\n        .x(d => d[0])\n        .y(d => d[1]);\n\n      // Add attack line to SVG\n      const path = g.append(\"path\")\n        .datum([source, midPoint, destination])\n        .attr(\"class\", \"attack-line\")\n        .attr(\"d\", lineGenerator)\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", lineColor)\n        .style(\"stroke-width\", 2)\n        .style(\"opacity\", 0.8);\n\n      // Animate the attack line\n      path.transition()\n        .duration(2000)\n        .attrTween(\"stroke-dasharray\", function () {\n          const length = this.getTotalLength();\n          return d3.interpolateString(\"0,\" + length, length + \",\" + length);\n        })\n        .on(\"end\", () => {\n          // Remove the path after animation\n          path.remove();\n          // Delay before showing the next attack\n          setTimeout(() => {\n            reset(); // Call reset to show the next attack\n          }, 500); // Adjust the timeout as needed\n        });\n    }\n\n    // Update the map on resize\n    map.on('resize', reset);\n\n    // Initial reset to draw the first attack\n    reset();\n\n    // Cleanup on component unmount\n    return () => {\n      map.off('resize', reset);\n      map.remove(); // Clean up the map instance\n    };\n  }, []);\n\n  return <div id=\"map\" style={{ height: '80vh' }}></div>; // Added style for full height\n};\n\nexport default MapComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzBN,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,GAAG,GAAGL,CAAC,CAACK,GAAG,CAAC,KAAK,EAAE;MACvBC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE,KAAK;MACtBC,eAAe,EAAE,KAAK;MACtBC,QAAQ,EAAE,KAAK;MACfC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;MACnCC,kBAAkB,EAAE;IACtB,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;;IAExB;IACAP,GAAG,CAACQ,UAAU,CAAC,gBAAgB,CAAC;IAChCR,GAAG,CAACS,OAAO,CAAC,gBAAgB,CAAC,CAACC,KAAK,CAACC,MAAM,GAAG,GAAG;;IAEhD;IACAhB,CAAC,CAACiB,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE;MACpCC,KAAK,EAAE,SAAS;MAChBC,SAAS,EAAE,SAAS;MACpBC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC,CAAC,CAACC,KAAK,CAACjB,GAAG,CAAC;;IAEb;IACAkB,KAAK,CAAC,wFAAwF,CAAC,CAC5FC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ3B,CAAC,CAAC4B,OAAO,CAACD,IAAI,EAAE;QACdZ,KAAK,EAAE;UACLG,KAAK,EAAE,SAAS;UAChBW,MAAM,EAAE,GAAG;UACXV,SAAS,EAAE,SAAS;UACpBC,WAAW,EAAE;QACf,CAAC;QACDU,aAAa,EAAE,SAAAA,CAAUC,OAAO,EAAEC,KAAK,EAAE;UACvCA,KAAK,CAACC,EAAE,CAAC;YACPC,SAAS,EAAE,SAAAA,CAAA,EAAY;cACrBF,KAAK,CAACG,QAAQ,CAAC;gBACbjB,KAAK,EAAE,SAAS;gBAChBW,MAAM,EAAE,GAAG;gBACXO,SAAS,EAAE,MAAM;gBACjBjB,SAAS,EAAE,SAAS;gBACpBC,WAAW,EAAE;cACf,CAAC,CAAC;YACJ,CAAC;YACDiB,QAAQ,EAAE,SAAAA,CAAA,EAAY;cACpBL,KAAK,CAACG,QAAQ,CAAC;gBACbjB,KAAK,EAAE,SAAS;gBAChBW,MAAM,EAAE,GAAG;gBACXO,SAAS,EAAE,EAAE;gBACbjB,SAAS,EAAE,SAAS;gBACpBC,WAAW,EAAE;cACf,CAAC,CAAC;YACJ;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,CAACE,KAAK,CAACjB,GAAG,CAAC;IACf,CAAC,CAAC;;IAEJ;IACA,MAAMiC,QAAQ,GAAGvC,EAAE,CAACwC,MAAM,CAAClC,GAAG,CAACmC,QAAQ,CAAC,CAAC,CAACC,WAAW,CAAC,CAACC,MAAM,CAAC,KAAK,CAAC;IACpE,MAAMC,CAAC,GAAGL,QAAQ,CAACI,MAAM,CAAC,GAAG,CAAC,CAACE,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC;;IAEjE;IACA,MAAMC,UAAU,GAAG,CACjB;MAAEC,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;MAAEC,WAAW,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC;MAAEC,UAAU,EAAE;IAAU,CAAC,EAChG;MAAEH,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;MAAEC,WAAW,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;MAAEC,UAAU,EAAE;IAAW,CAAC,EAC7F;MAAEH,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;MAAEC,WAAW,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;MAAEC,UAAU,EAAE;IAAU;IAC9F;IAAA,CACD;IAED,IAAIC,YAAY,GAAG,CAAC;;IAEpB;IACA,SAASC,YAAYA,CAACC,MAAM,EAAE;MAC5B,MAAMC,KAAK,GAAGhD,GAAG,CAACiD,kBAAkB,CAAC,IAAItD,CAAC,CAACuD,MAAM,CAACH,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MACxE,OAAO,CAACC,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAC;IAC3B;;IAEA;IACA,SAASC,KAAKA,CAAA,EAAG;MACf,MAAMC,MAAM,GAAGtD,GAAG,CAACuD,SAAS,CAAC,CAAC;QAC5BC,OAAO,GAAGxD,GAAG,CAACiD,kBAAkB,CAACK,MAAM,CAACG,YAAY,CAAC,CAAC,CAAC;QACvDC,WAAW,GAAG1D,GAAG,CAACiD,kBAAkB,CAACK,MAAM,CAACK,YAAY,CAAC,CAAC,CAAC;MAE7D1B,QAAQ,CACLM,IAAI,CAAC,OAAO,EAAEmB,WAAW,CAACP,CAAC,GAAGK,OAAO,CAACL,CAAC,CAAC,CACxCZ,IAAI,CAAC,QAAQ,EAAEmB,WAAW,CAACN,CAAC,GAAGI,OAAO,CAACJ,CAAC,CAAC,CACzC1C,KAAK,CAAC,MAAM,EAAE,GAAG8C,OAAO,CAACL,CAAC,IAAI,CAAC,CAC/BzC,KAAK,CAAC,KAAK,EAAE,GAAG8C,OAAO,CAACJ,CAAC,IAAI,CAAC;MAEjCd,CAAC,CAACC,IAAI,CAAC,WAAW,EAAE,aAAa,CAACiB,OAAO,CAACL,CAAC,KAAK,CAACK,OAAO,CAACJ,CAAC,GAAG,CAAC;;MAE9D;MACAQ,cAAc,CAAC,CAAC;IAClB;;IAEA;IACA,SAASA,cAAcA,CAAA,EAAG;MACxB,IAAIf,YAAY,IAAIL,UAAU,CAACqB,MAAM,EAAE;QACrChB,YAAY,GAAG,CAAC,CAAC,CAAC;MACpB;MAEA,MAAMiB,MAAM,GAAGtB,UAAU,CAACK,YAAY,CAAC;MACvCA,YAAY,EAAE,CAAC,CAAC;;MAEhB,MAAMH,MAAM,GAAGI,YAAY,CAACgB,MAAM,CAACpB,MAAM,CAAC;MAC1C,MAAMC,WAAW,GAAGG,YAAY,CAACgB,MAAM,CAACnB,WAAW,CAAC;;MAEpD;MACA,MAAMoB,QAAQ,GAAG,CACf,CAACrB,MAAM,CAAC,CAAC,CAAC,GAAGC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,EACtC,CAACD,MAAM,CAAC,CAAC,CAAC,GAAGC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CACjC;;MAED;MACA,IAAIqB,SAAS;MACb,QAAQF,MAAM,CAAClB,UAAU;QACvB,KAAK,SAAS;UACZoB,SAAS,GAAG,KAAK;UACjB;QACF,KAAK,UAAU;UACbA,SAAS,GAAG,QAAQ;UACpB;QACF,KAAK,SAAS;UACZA,SAAS,GAAG,QAAQ;UACpB;QACF;UACEA,SAAS,GAAG,OAAO;MACvB;;MAEA;MACA,MAAMC,aAAa,GAAGvE,EAAE,CAACwE,IAAI,CAAC,CAAC,CAC5BC,KAAK,CAACzE,EAAE,CAAC0E,WAAW,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAC7BlB,CAAC,CAACmB,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CACZlB,CAAC,CAACkB,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEf;MACA,MAAMC,IAAI,GAAGjC,CAAC,CAACD,MAAM,CAAC,MAAM,CAAC,CAC1BmC,KAAK,CAAC,CAAC9B,MAAM,EAAEqB,QAAQ,EAAEpB,WAAW,CAAC,CAAC,CACtCJ,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAC5BA,IAAI,CAAC,GAAG,EAAE0B,aAAa,CAAC,CACxBvD,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CACrBA,KAAK,CAAC,QAAQ,EAAEsD,SAAS,CAAC,CAC1BtD,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,CACxBA,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC;;MAExB;MACA6D,IAAI,CAACE,UAAU,CAAC,CAAC,CACdC,QAAQ,CAAC,IAAI,CAAC,CACdC,SAAS,CAAC,kBAAkB,EAAE,YAAY;QACzC,MAAMd,MAAM,GAAG,IAAI,CAACe,cAAc,CAAC,CAAC;QACpC,OAAOlF,EAAE,CAACmF,iBAAiB,CAAC,IAAI,GAAGhB,MAAM,EAAEA,MAAM,GAAG,GAAG,GAAGA,MAAM,CAAC;MACnE,CAAC,CAAC,CACDjC,EAAE,CAAC,KAAK,EAAE,MAAM;QACf;QACA2C,IAAI,CAACO,MAAM,CAAC,CAAC;QACb;QACAC,UAAU,CAAC,MAAM;UACf1B,KAAK,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MACX,CAAC,CAAC;IACN;;IAEA;IACArD,GAAG,CAAC4B,EAAE,CAAC,QAAQ,EAAEyB,KAAK,CAAC;;IAEvB;IACAA,KAAK,CAAC,CAAC;;IAEP;IACA,OAAO,MAAM;MACXrD,GAAG,CAACgF,GAAG,CAAC,QAAQ,EAAE3B,KAAK,CAAC;MACxBrD,GAAG,CAAC8E,MAAM,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOjF,OAAA;IAAK4C,EAAE,EAAC,KAAK;IAAC/B,KAAK,EAAE;MAAEuE,MAAM,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC,CAAC,CAAC;AAC1D,CAAC;AAACtF,EAAA,CAnLID,YAAY;AAAAwF,EAAA,GAAZxF,YAAY;AAqLlB,eAAeA,YAAY;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}