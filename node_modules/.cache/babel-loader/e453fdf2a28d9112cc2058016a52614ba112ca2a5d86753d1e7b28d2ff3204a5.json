{"ast":null,"code":"var _jsxFileName = \"/Users/harshitrishav/threat-map/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  useEffect(() => {\n    // Initialize the map\n    const map = L.map('map', {\n      zoomControl: false,\n      scrollWheelZoom: false,\n      doubleClickZoom: false,\n      dragging: false,\n      maxBounds: [[-90, -180], [90, 180]],\n      maxBoundsViscosity: 1.0\n    }).setView([40, 0], 1.5);\n\n    // Create a pane for the background layer\n    map.createPane('backgroundPane');\n    map.getPane('backgroundPane').style.zIndex = 100;\n\n    // Add a solid-colored rectangle to cover the entire map\n    L.rectangle([[-90, -180], [90, 180]], {\n      color: '#000000',\n      fillColor: '#000000',\n      fillOpacity: 1,\n      pane: 'backgroundPane'\n    }).addTo(map);\n\n    // Fetch and add geoJSON data to the map\n    fetch('https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson').then(response => response.json()).then(data => {\n      L.geoJSON(data, {\n        style: {\n          color: '#4A90E2',\n          weight: 0.5,\n          fillColor: '#000000',\n          fillOpacity: 0.5\n        },\n        onEachFeature: function (feature, layer) {\n          layer.on({\n            mouseover: function () {\n              layer.setStyle({\n                color: '#4A90E2',\n                weight: 1.5,\n                dashArray: '5, 5',\n                fillColor: '#4A90E2',\n                fillOpacity: 0.5\n              });\n            },\n            mouseout: function () {\n              layer.setStyle({\n                color: '#4A90E2',\n                weight: 0.5,\n                dashArray: '',\n                fillColor: '#000000',\n                fillOpacity: 0.5\n              });\n            }\n          });\n        }\n      }).addTo(map);\n    });\n\n    // Create an SVG layer on top of Leaflet\n    const svgLayer = d3.select(map.getPanes().overlayPane).append(\"svg\"),\n      g = svgLayer.append(\"g\").attr(\"class\", \"leaflet-zoom-hide\");\n\n    // Define the attack data with source, destination, names, and threat type\n    let attackData = [{\n      id: 1,\n      source: [37.7749, -122.4194],\n      destination: [40.7128, -74.0060],\n      sourceName: 'USA',\n      destinationName: 'USA',\n      threatType: 'malware'\n    },\n    // ... other attack data\n    {\n      id: 32,\n      source: [34.0522, -118.2437],\n      destination: [40.7128, -74.0060],\n      sourceName: 'USA',\n      destinationName: 'USA',\n      threatType: 'malware'\n    }];\n    let currentIndex = 0;\n\n    // Define a default speed for the animation duration\n    const defaultSpeed = 1000; // Duration in milliseconds\n\n    // Define the projection from geographical coordinates (lat, lon) to screen points\n    function projectPoint(latlng) {\n      const point = map.latLngToLayerPoint(new L.LatLng(latlng[0], latlng[1]));\n      return [point.x, point.y];\n    }\n\n    // Function to redraw the attack lines and reposition the SVG\n    function reset() {\n      const bounds = map.getBounds(),\n        topLeft = map.latLngToLayerPoint(bounds.getNorthWest()),\n        bottomRight = map.latLngToLayerPoint(bounds.getSouthEast());\n      svgLayer.attr('width', bottomRight.x - topLeft.x).attr('height', bottomRight.y - topLeft.y).style('left', `${topLeft.x}px`).style('top', `${topLeft.y}px`);\n      g.attr('transform', `translate(${-topLeft.x}, ${-topLeft.y})`);\n      showNextAttack();\n    }\n\n    // Function to display the next attack after the previous one reaches the destination\n    function showNextAttack() {\n      if (currentIndex >= attackData.length) {\n        currentIndex = 0; // Reset if we reach the end of the attack data\n      }\n      const attack = attackData[currentIndex];\n      currentIndex++; // Move to the next attack in the list\n\n      const source = projectPoint(attack.source);\n      const destination = projectPoint(attack.destination);\n\n      // Mid-point for curvature\n      const midPoint = [(source[0] + destination[0]) / 2 + 100, (source[1] + destination[1]) / 2];\n\n      // Set color based on threat type\n      let lineColor;\n      switch (attack.threatType) {\n        case 'malware':\n          lineColor = 'red';\n          break;\n        case 'phishing':\n          lineColor = 'purple';\n          break;\n        case 'exploit':\n          lineColor = 'yellow';\n          break;\n        default:\n          lineColor = 'white';\n      }\n\n      // Create line generator for curved path\n      const lineGenerator = d3.line().curve(d3.curveBundle.beta(1)).x(d => d[0]).y(d => d[1]);\n\n      // Add attack line to SVG\n      const path = g.append(\"path\").datum([source, midPoint, destination]).attr(\"class\", \"attack-line\").attr(\"d\", lineGenerator).attr(\"stroke\", lineColor).attr(\"stroke-width\", 2).attr(\"stroke-dasharray\", function () {\n        return this.getTotalLength();\n      }).attr(\"stroke-dashoffset\", function () {\n        return this.getTotalLength();\n      }).transition().duration(defaultSpeed) // Use the default speed for each attack\n      .ease(d3.easeLinear).attr(\"stroke-dashoffset\", 0).on(\"end\", function () {\n        d3.select(this).remove(); // Remove the path after animation\n        showNextAttack(); // Immediately start the next attack\n      });\n\n      // Add attack information to the sidebar\n      const attackInfo = `${attack.sourceName} âž” ${attack.destinationName} (${attack.threatType})`;\n      d3.select(\"#activeAttacksList\").append(\"li\").text(attackInfo).transition().duration(1000).remove(); // Show info for a brief time\n    }\n\n    // Event listener for the attack count input\n    document.getElementById('updateAttacks').addEventListener('click', () => {\n      showNextAttack(); // Start or continue showing attacks\n    });\n\n    // Update the map on move end\n    map.on(\"moveend\", reset);\n    reset(); // Start displaying attacks\n\n    // Cleanup on component unmount\n    return () => {\n      map.off('moveend', reset);\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100%',\n        height: '80vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"activeAttacksList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"updateAttacks\",\n      children: \"Update Attacks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","d3","L","jsxDEV","_jsxDEV","MapComponent","_s","map","zoomControl","scrollWheelZoom","doubleClickZoom","dragging","maxBounds","maxBoundsViscosity","setView","createPane","getPane","style","zIndex","rectangle","color","fillColor","fillOpacity","pane","addTo","fetch","then","response","json","data","geoJSON","weight","onEachFeature","feature","layer","on","mouseover","setStyle","dashArray","mouseout","svgLayer","select","getPanes","overlayPane","append","g","attr","attackData","id","source","destination","sourceName","destinationName","threatType","currentIndex","defaultSpeed","projectPoint","latlng","point","latLngToLayerPoint","LatLng","x","y","reset","bounds","getBounds","topLeft","getNorthWest","bottomRight","getSouthEast","showNextAttack","length","attack","midPoint","lineColor","lineGenerator","line","curve","curveBundle","beta","d","path","datum","getTotalLength","transition","duration","ease","easeLinear","remove","attackInfo","text","document","getElementById","addEventListener","off","children","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harshitrishav/threat-map/src/components/MapComponent.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst MapComponent = () => {\n  useEffect(() => {\n    // Initialize the map\n    const map = L.map('map', {\n      zoomControl: false,\n      scrollWheelZoom: false,\n      doubleClickZoom: false,\n      dragging: false,\n      maxBounds: [[-90, -180], [90, 180]],\n      maxBoundsViscosity: 1.0\n    }).setView([40, 0], 1.5);\n\n    // Create a pane for the background layer\n    map.createPane('backgroundPane');\n    map.getPane('backgroundPane').style.zIndex = 100;\n\n    // Add a solid-colored rectangle to cover the entire map\n    L.rectangle([[-90, -180], [90, 180]], {\n      color: '#000000',\n      fillColor: '#000000',\n      fillOpacity: 1,\n      pane: 'backgroundPane'\n    }).addTo(map);\n\n    // Fetch and add geoJSON data to the map\n    fetch('https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson')\n      .then(response => response.json())\n      .then(data => {\n        L.geoJSON(data, {\n          style: {\n            color: '#4A90E2',\n            weight: 0.5,\n            fillColor: '#000000',\n            fillOpacity: 0.5\n          },\n          onEachFeature: function (feature, layer) {\n            layer.on({\n              mouseover: function () {\n                layer.setStyle({\n                  color: '#4A90E2',\n                  weight: 1.5,\n                  dashArray: '5, 5',\n                  fillColor: '#4A90E2',\n                  fillOpacity: 0.5\n                });\n              },\n              mouseout: function () {\n                layer.setStyle({\n                  color: '#4A90E2',\n                  weight: 0.5,\n                  dashArray: '',\n                  fillColor: '#000000',\n                  fillOpacity: 0.5\n                });\n              }\n            });\n          }\n        }).addTo(map);\n      });\n\n    // Create an SVG layer on top of Leaflet\n    const svgLayer = d3.select(map.getPanes().overlayPane).append(\"svg\"),\n      g = svgLayer.append(\"g\").attr(\"class\", \"leaflet-zoom-hide\");\n\n    // Define the attack data with source, destination, names, and threat type\n    let attackData = [\n      { id: 1, source: [37.7749, -122.4194], destination: [40.7128, -74.0060], sourceName: 'USA', destinationName: 'USA', threatType: 'malware' },\n      // ... other attack data\n      { id: 32, source: [34.0522, -118.2437], destination: [40.7128, -74.0060], sourceName: 'USA', destinationName: 'USA', threatType: 'malware' }\n    ];\n\n    let currentIndex = 0;\n\n    // Define a default speed for the animation duration\n    const defaultSpeed = 1000; // Duration in milliseconds\n\n    // Define the projection from geographical coordinates (lat, lon) to screen points\n    function projectPoint(latlng) {\n      const point = map.latLngToLayerPoint(new L.LatLng(latlng[0], latlng[1]));\n      return [point.x, point.y];\n    }\n\n    // Function to redraw the attack lines and reposition the SVG\n    function reset() {\n      const bounds = map.getBounds(),\n        topLeft = map.latLngToLayerPoint(bounds.getNorthWest()),\n        bottomRight = map.latLngToLayerPoint(bounds.getSouthEast());\n\n      svgLayer\n        .attr('width', bottomRight.x - topLeft.x)\n        .attr('height', bottomRight.y - topLeft.y)\n        .style('left', `${topLeft.x}px`)\n        .style('top', `${topLeft.y}px`);\n\n      g.attr('transform', `translate(${-topLeft.x}, ${-topLeft.y})`);\n\n      showNextAttack();\n    }\n\n    // Function to display the next attack after the previous one reaches the destination\n    function showNextAttack() {\n      if (currentIndex >= attackData.length) {\n        currentIndex = 0; // Reset if we reach the end of the attack data\n      }\n\n      const attack = attackData[currentIndex];\n      currentIndex++; // Move to the next attack in the list\n\n      const source = projectPoint(attack.source);\n      const destination = projectPoint(attack.destination);\n\n      // Mid-point for curvature\n      const midPoint = [\n        (source[0] + destination[0]) / 2 + 100,\n        (source[1] + destination[1]) / 2\n      ];\n\n      // Set color based on threat type\n      let lineColor;\n      switch (attack.threatType) {\n        case 'malware':\n          lineColor = 'red';\n          break;\n        case 'phishing':\n          lineColor = 'purple';\n          break;\n        case 'exploit':\n          lineColor = 'yellow';\n          break;\n        default:\n          lineColor = 'white';\n      }\n\n      // Create line generator for curved path\n      const lineGenerator = d3.line()\n        .curve(d3.curveBundle.beta(1))\n        .x(d => d[0])\n        .y(d => d[1]);\n\n      // Add attack line to SVG\n      const path = g.append(\"path\")\n        .datum([source, midPoint, destination])\n        .attr(\"class\", \"attack-line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"stroke\", lineColor)\n        .attr(\"stroke-width\", 2)\n        .attr(\"stroke-dasharray\", function () {\n          return this.getTotalLength();\n        })\n        .attr(\"stroke-dashoffset\", function () {\n          return this.getTotalLength();\n        })\n        .transition()\n        .duration(defaultSpeed)  // Use the default speed for each attack\n        .ease(d3.easeLinear)\n        .attr(\"stroke-dashoffset\", 0)\n        .on(\"end\", function() {\n          d3.select(this).remove(); // Remove the path after animation\n          showNextAttack(); // Immediately start the next attack\n        });\n\n      // Add attack information to the sidebar\n      const attackInfo = `${attack.sourceName} âž” ${attack.destinationName} (${attack.threatType})`;\n      d3.select(\"#activeAttacksList\").append(\"li\").text(attackInfo).transition().duration(1000).remove(); // Show info for a brief time\n    }\n\n    // Event listener for the attack count input\n    document.getElementById('updateAttacks').addEventListener('click', () => {\n      showNextAttack(); // Start or continue showing attacks\n    });\n\n    // Update the map on move end\n    map.on(\"moveend\", reset);\n    reset(); // Start displaying attacks\n\n    // Cleanup on component unmount\n    return () => {\n      map.off('moveend', reset);\n      map.remove(); \n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ width: '100%', height: '80vh' }}></div>\n      <ul id=\"activeAttacksList\"></ul> {/* Sidebar for displaying active attacks */}\n      <button id=\"updateAttacks\">Update Attacks</button>\n    </div>\n  );\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}